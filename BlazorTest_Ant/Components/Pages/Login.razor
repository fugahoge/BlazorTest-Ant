@page "/login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<HeadContent>
  <style media="screen">
    .container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      animation: fade 0.2s ease-in-out forwards;
    }

    h1 {
      font-size: 35px;
      font-weight: 100;
      text-align: center;
    }
  </style>
</HeadContent>


      <EditForm FormName="LoginForm" Model="@LoginData" OnValidSubmit="@Submit">

        <DataAnnotationsValidator />

          <Input Style="width: 100%" @bind-Value="LoginData.UserName" Label="UserName" />
          <InputPassword Style="width: 100%" @bind-Value="LoginData.Password" Label="Password" TextFieldType="TextFieldType.Password" />
          <Button Type="@ButtonType.Primary" HtmlType="submit" Style="width: 100%">Login</Button>


      </EditForm>


@code {
  [SupplyParameterFromForm]
  private LoginForm LoginData { get; set; } = new LoginForm();

  [CascadingParameter]
  private HttpContext? HttpContext { get; set; }

  protected override void OnInitialized()
  {
    LoginData ??= new();
  }

  private async Task Submit()
  {
    _ = HttpContext ?? throw new InvalidOperationException("Static SSR で実行してください。");

    ClaimsIdentity? identity = null;

    // ログイン確認（本来であればここでログイン機能を実行する）
    if (LoginData.UserName == "admin" && LoginData.Password == "admin")
    {
      identity = new(
          [new Claim(ClaimTypes.Name, LoginData.UserName), new Claim(ClaimTypes.Role, "Administrator")],
          CookieAuthenticationDefaults.AuthenticationScheme);
    }
    else if (LoginData.UserName == "user" && LoginData.Password == "user")
    {
      identity = new(
          [new Claim(ClaimTypes.Name, LoginData.UserName), new Claim(ClaimTypes.Role, "User")],
          CookieAuthenticationDefaults.AuthenticationScheme);
    }

    // ログイン処理
    if (identity != null)
    {
      // ログイン
      await HttpContext.SignInAsync(
          CookieAuthenticationDefaults.AuthenticationScheme,
          new ClaimsPrincipal(identity)
      );

      // トップページに遷移
      NavigationManager.NavigateTo(
          "/",
          forceLoad: true
      );
    }
    else
    {
      // ログイン失敗
      //      ValidationMessageStore.Add(EditContext.Field(""), "ログインに失敗しました。");

    }
  }

  class LoginForm
  {
    [Required(ErrorMessage = "ユーザー名を入力してください。")]
    public string UserName { get; set; } = "";

    [Required(ErrorMessage = "パスワードを入力してください。")]
    public string Password { get; set; } = "";
  }
}